#!/bin/bash

usage() {
  cat << EOF
 clockwerk <action> [arguments]

 actions: job
          category
          report

 arguments: job start <category> [comment]
                stop
                delete <jobid>

            category add <name> [description]
                     edit <name> <newname> [description]
                     delete <name>

            report [from] [to]

EOF

  exit
}

CW_DATADIR="${XDG_DATA_HOME:-$HOME/.local/share}/clockwerk"
DBFILE="${CW_DATADIR}/clockwerk.db"
LOCKFILE="${CW_DATADIR}/clockwerk.lock"

debug() {
  local mesg=$1; shift
  printf "debug: %s\n" "$mesg"
}

die() {
  local mesg=$1; shift
  printf "error: %s\n" "$mesg"
}

warn() {
  local mesg=$1; shift
  printf "warn: %s\n" "$mesg"
}

info() {
  :
}

# return 0 on success
# return 1 on failure
initialize_db() {
  local sql="CREATE TABLE job(j_id INTEGER PRIMARY KEY AUTOINCREMENT,
                              j_category TEXT NOT NULL,
                              j_start INTEGER NOT NULL,
                              j_stop INTEGER DEFAULT 0,
                              j_comment NULL,
                              FOREIGN KEY (j_category) REFERENCES category (c_name));
             CREATE TABLE category(c_name TEXT PRIMARY KEY,
                                   c_desc TEXT);"

  exec_query "$sql" || return 1

  return 0
}

exec_query() {
  sqlite3 "$DBFILE" "$@"
}

# returns 0 on success
# returns non-zero on failure
lock_acquire() {
  debug "Acquiring lock"
  [[ -f $LOCKFILE ]] && return 1
  touch "$LOCKFILE" && return 0 || return 1
}

# returns 0 on success
# returns non-zero on failure
lock_release() {
  debug "Releasing lock"
  [[ ! -f $LOCKFILE ]] && return 1
  cat "$LOCKFILE"
  rm "$LOCKFILE"
}

# return 0 on success
# return 1 on failure to acquire lock
# return 2 on sql error
job_start() {
  lock_acquire || return 1
  local ret=$?
  [[ $ret -eq 1 ]] 

  local jobstart=$(date +%s) category=$1 comment=$2

  echo "$jobstart|$category|$comment" > "$LOCKFILE"
}

# return 0 on success
# return 1 on error
job_stop() {
  [[ ! -f $LOCKFILE ]] && return 1
  local category jobstart comment jobstop=$(date +%s)

  IFS=$'|' read jobstart category comment <<< "$(lock_release || echo -1)"

  [[ $jobstart -eq -1 ]] && return 1

  [[ $(get_duration $jobstart $jobstop) -gt 60 ]] && return 2

  local sql="INSERT INTO job(j_category, j_start, j_stop, j_comment)
                      VALUES('$category', '$jobstart', '$jobstop', 'comment');"

  exec_query "$sql" &>/dev/null

  [[ $jobid -eq 0 ]] && return 3
}

# returns duration in seconds
# if only 1 arg, end time is assumed to be now
get_duration() {
  local start=$1 end dur
  [[ -n $2 ]] && end=$2 || end=$(date +%s)

  dur=$(( $end - $start ))

  [[ $dur -lt 0 ]] && return 0 || return $dur
}

date_to_seconds() {
  local seconds=$(date --date="$1" +%s || echo "0")
  return seconds
}

seconds_to_hms() {
  local seconds=$1 hours=0 minutes=0

  hours=$(( seconds / 3600 ))
  seconds=$(( seconds - hours * 3600 ))

  minutes=$(( seconds / 60 ))
  seconds=$(( seconds - minutes * 60 ))

  echo $hours $minutes $seconds
}

# return 0 on success
# return 1 on category exists
# return 2 on sql error
category_add() {
  local sql="INSERT INTO category(c_name, c_desc) VALUES('$1', '$2');"
  local result=$(exec_query "$sql" 2>&1)

  [[ $result = "Error: column c_name is not unique" ]] && return 1
  [[ $result =~ ^Error:* ]] && return 2

  return 0
}

category_del() {
  :
}

category_list() {
  local sql="SELECT c_name, c_desc FROM category"

  while IFS=$'|' read c_name c_desc; do
    printf "%-20s%-20s\n" "$c_name" "$c_desc"
  done < <(exec_query "$sql")
}

do_job() {
  local action=$1; shift

  case $action in
    "start")
      [[ -z $1 ]] && die "missing job category"
      job_start "$@"
      ;;
    "stop")
      job_stop
      ;;
    *) usage
      ;;
  esac

}

do_category() {
  local action=$1; shift

  case $action in
    "add") category_add "$@" ;;
    "list") category_list ;;
    *) die "Not implemented" ;;
  esac

}

do_report() {
  local action=$1; shift
  die "Not implemented"
}

#sanity checks
[[ ! -d $CW_DATADIR ]] && mkdir -p "$CW_DATADIR"
exec_query 'SELECT * FROM job' &>/dev/null || initialize_db || die "failed to initialize database"

# option parsing
action=$1; shift

[[ $# -eq 0 ]] && usage

case $action in
  "job") do_job "$@" ;;
  "category") do_category "$@" ;;
  "report") do_report "$@" ;;
  *) usage ;;
esac

